name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  ELECTRON_CACHE: ~/.cache/electron
  ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: mac
            script: dist:mac
            artifact-pattern: |
              dist/*.dmg
              dist/*.zip
          - os: windows-latest
            platform: win
            script: dist:win
            artifact-pattern: |
              dist/*.exe

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

      - name: Run tests
        run: pnpm test:run

      - name: Build application (${{ matrix.platform }})
        run: pnpm ${{ matrix.script }}
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: resdeeds-${{ matrix.platform }}
          path: ${{ matrix.artifact-pattern }}
          retention-days: 30
          compression-level: 6

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Download all artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          path: artifacts

      - name: Display artifact structure
        run: ls -la artifacts/

      - name: Extract version from tag
        id: version
        run: |
          # Remove 'v' prefix from tag to get clean version
          VERSION="${{ github.ref_name }}"
          CLEAN_VERSION="${VERSION#v}"
          echo "version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
          echo "tag_version=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Create Release
        run: |
          gh release create ${{ github.ref_name }} \
            --title "ResDEEDS ${{ github.ref_name }}" \
            --notes "## ResDEEDS ${{ github.ref_name }}
            
            ### Downloads
            - **macOS**: Download the \`.dmg\` file for macOS installation
            - **Windows**: Download the \`.exe\` file for Windows installation
            
            ### Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for full details."
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Find and upload macOS artifacts
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Find DMG file with dynamic version
          DMG_FILE=$(find artifacts/resdeeds-mac -name "resdeeds-${VERSION}.dmg" -type f | head -1)
          if [ -n "$DMG_FILE" ]; then
            echo "Uploading DMG: $DMG_FILE"
            gh release upload ${{ github.ref_name }} "$DMG_FILE" --clobber
          else
            echo "No DMG file found for version ${VERSION}"
            echo "Available files:"
            find artifacts/resdeeds-mac -name "*.dmg" -type f
          fi
          
          # Find ZIP file with dynamic version
          ZIP_FILE=$(find artifacts/resdeeds-mac -name "ResDEEDS-${VERSION}-arm64-mac.zip" -type f | head -1)
          if [ -n "$ZIP_FILE" ]; then
            echo "Uploading ZIP: $ZIP_FILE"
            gh release upload ${{ github.ref_name }} "$ZIP_FILE" --clobber
          else
            echo "No ZIP file found for version ${VERSION}"
            echo "Available files:"
            find artifacts/resdeeds-mac -name "*.zip" -type f
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Find and upload Windows artifacts
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Find EXE file with dynamic version
          EXE_FILE=$(find artifacts/resdeeds-win -name "*${VERSION}*.exe" -type f | head -1)
          if [ -n "$EXE_FILE" ]; then
            echo "Uploading EXE: $EXE_FILE"
            gh release upload ${{ github.ref_name }} "$EXE_FILE" --clobber
          else
            echo "No EXE file found for version ${VERSION}"
            echo "Available files:"
            find artifacts/resdeeds-win -name "*.exe" -type f
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}
